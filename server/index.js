const express = require('express');
const cors = require('cors');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = process.env.PORT || 3001;
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';

// Middleware
app.use(cors());
app.use(express.json());

// In-memory database (–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞)
// –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ PostgreSQL
let users = [];
let ecoActions = [
  { id: 1, title: '–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º—É—Å–æ—Ä–∞', category: 'waste', points: 10 },
  { id: 2, title: '–û—Ç–∫–∞–∑ –æ—Ç –ø–ª–∞—Å—Ç–∏–∫–∞', category: 'plastic', points: 15 },
  { id: 3, title: '–ü–æ–µ–∑–¥–∫–∞ –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ', category: 'transport', points: 20 },
  { id: 4, title: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–Ω–æ–≥–æ—Ä–∞–∑–æ–≤–æ–π –±—É—Ç—ã–ª–∫–∏', category: 'plastic', points: 10 },
  { id: 5, title: '–ü–æ–∫—É–ø–∫–∞ –º–µ—Å—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤', category: 'food', points: 15 },
  { id: 6, title: '–≠–∫–æ–Ω–æ–º–∏—è –≤–æ–¥—ã', category: 'water', points: 10 },
  { id: 7, title: '–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–≤–µ—Ç–∞', category: 'energy', points: 5 },
  { id: 8, title: '–ü–æ—Å–∞–¥–∫–∞ –¥–µ—Ä–µ–≤–∞', category: 'nature', points: 50 },
  { id: 9, title: '–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', category: 'transport', points: 15 },
  { id: 10, title: '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–π –¥–µ–Ω—å', category: 'food', points: 20 }
];
let userActions = [];
let nextUserId = 1;
let nextActionId = userActions.length + 1;

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
const authenticateToken = (req, res, next) => {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }
    req.user = user;
    next();
  });
};

// Routes

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/api/auth/register', async (req, res) => {
  try {
    const { name, email, password } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = users.find(u => u.email === email);
    if (existingUser) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash(password, 10);

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = {
      id: nextUserId++,
      name,
      email,
      password: hashedPassword,
      avatar_url: `https://ui-avatars.com/api/?name=${encodeURIComponent(name)}&background=3CB371&color=fff`,
      eco_points: 0,
      level: 1,
      created_at: new Date().toISOString()
    };

    users.push(user);

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '7d' });

    res.status(201).json({
      token,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        avatar_url: user.avatar_url,
        eco_points: user.eco_points,
        level: user.level
      }
    });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –í—Ö–æ–¥
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = users.find(u => u.email === email);
    if (!user) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const validPassword = await bcrypt.compare(password, user.password);
    if (!validPassword) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '7d' });

    res.json({
      token,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        avatar_url: user.avatar_url,
        eco_points: user.eco_points,
        level: user.level
      }
    });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/profile', authenticateToken, (req, res) => {
  const user = users.find(u => u.id === req.user.id);
  if (!user) {
    return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }

  res.json({
    id: user.id,
    name: user.name,
    email: user.email,
    avatar_url: user.avatar_url,
    eco_points: user.eco_points,
    level: user.level,
    created_at: user.created_at
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏—è
app.get('/api/actions', authenticateToken, (req, res) => {
  res.json(ecoActions);
});

// –î–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
app.post('/api/user/actions', authenticateToken, (req, res) => {
  const { action_id, custom_action } = req.body;
  const userId = req.user.id;

  let points = 0;
  let actionTitle = '';

  if (action_id) {
    const action = ecoActions.find(a => a.id === action_id);
    if (!action) {
      return res.status(404).json({ error: '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    points = action.points;
    actionTitle = action.title;
  } else if (custom_action) {
    points = 10; // –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏ –∑–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    actionTitle = custom_action;
  }

  const userAction = {
    id: nextActionId++,
    user_id: userId,
    action_id: action_id || null,
    custom_action: custom_action || null,
    date: new Date().toISOString(),
    points
  };

  userActions.push(userAction);

  // –û–±–Ω–æ–≤–∏—Ç—å –æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = users.find(u => u.id === userId);
  if (user) {
    user.eco_points += points;
    user.level = Math.floor(user.eco_points / 100) + 1;
  }

  res.status(201).json({
    ...userAction,
    title: actionTitle,
    user: {
      eco_points: user.eco_points,
      level: user.level
    }
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/actions', authenticateToken, (req, res) => {
  const userId = req.user.id;
  const actions = userActions
    .filter(a => a.user_id === userId)
    .map(a => {
      const action = ecoActions.find(ea => ea.id === a.action_id);
      return {
        ...a,
        title: action ? action.title : a.custom_action,
        category: action ? action.category : 'custom'
      };
    })
    .sort((a, b) => new Date(b.date) - new Date(a.date));

  res.json(actions);
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/stats', authenticateToken, (req, res) => {
  const userId = req.user.id;
  const actions = userActions.filter(a => a.user_id === userId);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
  const dailyStats = {};
  actions.forEach(action => {
    const date = new Date(action.date).toISOString().split('T')[0];
    if (!dailyStats[date]) {
      dailyStats[date] = { count: 0, points: 0 };
    }
    dailyStats[date].count++;
    dailyStats[date].points += action.points;
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const categoryStats = {};
  actions.forEach(action => {
    const ecoAction = ecoActions.find(a => a.id === action.action_id);
    const category = ecoAction ? ecoAction.category : 'custom';
    if (!categoryStats[category]) {
      categoryStats[category] = { count: 0, points: 0 };
    }
    categoryStats[category].count++;
    categoryStats[category].points += action.points;
  });

  // CO2 —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞)
  const co2Saved = actions.length * 2.5; // –∫–≥ CO2

  res.json({
    total_actions: actions.length,
    total_points: actions.reduce((sum, a) => sum + a.points, 0),
    co2_saved: co2Saved,
    daily_stats: dailyStats,
    category_stats: categoryStats
  });
});

// –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤
app.get('/api/leaderboard', authenticateToken, (req, res) => {
  const leaderboard = users
    .map(u => ({
      id: u.id,
      name: u.name,
      avatar_url: u.avatar_url,
      eco_points: u.eco_points,
      level: u.level
    }))
    .sort((a, b) => b.eco_points - a.eco_points)
    .slice(0, 10);

  res.json(leaderboard);
});

// –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/achievements', authenticateToken, (req, res) => {
  const userId = req.user.id;
  const user = users.find(u => u.id === userId);
  const actions = userActions.filter(a => a.user_id === userId);

  const achievements = [];

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  if (actions.length >= 10) {
    achievements.push({
      id: 1,
      title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
      description: '10 —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
      icon: 'üå±',
      unlocked: true
    });
  }

  if (actions.length >= 50) {
    achievements.push({
      id: 2,
      title: '–≠–∫–æ-–≤–æ–∏–Ω',
      description: '50 —ç–∫–æ-–¥–µ–π—Å—Ç–≤–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ',
      icon: 'üåø',
      unlocked: true
    });
  }

  if (user.eco_points >= 100) {
    achievements.push({
      id: 3,
      title: '–°–æ—Ç–Ω—è –æ—á–∫–æ–≤',
      description: '–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ 100 —ç–∫–æ–ø–æ–∏–Ω—Ç–æ–≤',
      icon: 'üíØ',
      unlocked: true
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–µ–ª–∏ –±–µ–∑ –ø–ª–∞—Å—Ç–∏–∫–∞
  const plasticActions = actions.filter(a => {
    const action = ecoActions.find(ea => ea.id === a.action_id);
    return action && action.category === 'plastic';
  });

  if (plasticActions.length >= 7) {
    achievements.push({
      id: 4,
      title: '–ù–µ–¥–µ–ª—è –±–µ–∑ –ø–ª–∞—Å—Ç–∏–∫–∞',
      description: '7 –¥–Ω–µ–π –æ—Ç–∫–∞–∑–∞ –æ—Ç –ø–ª–∞—Å—Ç–∏–∫–∞',
      icon: '‚ôªÔ∏è',
      unlocked: true
    });
  }

  // –í–µ–ª–æ—Å–∏–ø–µ–¥
  const bikeActions = actions.filter(a => a.action_id === 3);
  const totalBikeKm = bikeActions.length * 5; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 5 –∫–º –∑–∞ –ø–æ–µ–∑–¥–∫—É

  if (totalBikeKm >= 100) {
    achievements.push({
      id: 5,
      title: '100 –∫–º –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ',
      description: '–ü—Ä–æ–µ—Ö–∞–Ω–æ 100 –∫–º –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ',
      icon: 'üö¥',
      unlocked: true
    });
  }

  res.json(achievements);
});

app.listen(PORT, () => {
  console.log(`üåç EcoTrack API –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
